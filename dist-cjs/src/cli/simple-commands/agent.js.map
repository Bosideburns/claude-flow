{"version":3,"sources":["../../../../src/cli/simple-commands/agent.js"],"sourcesContent":["// agent.js - Agent management commands\nimport { printSuccess, printError, printWarning } from '../utils.js';\nimport { onAgentSpawn, onAgentAction } from './performance-hooks.js';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\nexport async function agentCommand(subArgs, flags) {\n  const agentCmd = subArgs[0];\n\n  switch (agentCmd) {\n    case 'run':\n    case 'execute':\n      await executeAgentTask(subArgs, flags);\n      break;\n\n    case 'spawn':\n      await spawnAgent(subArgs, flags);\n      break;\n\n    case 'list':\n      await listAgents(subArgs, flags);\n      break;\n\n    case 'agents':\n      await listAgenticFlowAgents(subArgs, flags);\n      break;\n\n    case 'hierarchy':\n      await manageHierarchy(subArgs, flags);\n      break;\n\n    case 'network':\n      await manageNetwork(subArgs, flags);\n      break;\n\n    case 'ecosystem':\n      await manageEcosystem(subArgs, flags);\n      break;\n\n    case 'provision':\n      await provisionAgent(subArgs, flags);\n      break;\n\n    case 'terminate':\n      await terminateAgent(subArgs, flags);\n      break;\n\n    case 'info':\n      await showAgentInfo(subArgs, flags);\n      break;\n\n    default:\n      showAgentHelp();\n  }\n}\n\nasync function executeAgentTask(subArgs, flags) {\n  const agentType = subArgs[1];\n  const task = subArgs[2];\n\n  if (!agentType || !task) {\n    printError('Usage: agent run <agent-type> \"<task>\" [--provider <provider>] [--model <model>]');\n    console.log('\\nExamples:');\n    console.log('  claude-flow agent run coder \"Create a REST API\"');\n    console.log('  claude-flow agent run researcher \"Research AI trends\" --provider openrouter');\n    console.log('  claude-flow agent run reviewer \"Review code for security\" --provider onnx');\n    return;\n  }\n\n  printSuccess(`üöÄ Executing ${agentType} agent with agentic-flow...`);\n  console.log(`Task: ${task}`);\n\n  const provider = flags.provider || 'anthropic';\n  if (flags.provider) {\n    console.log(`Provider: ${provider}`);\n  }\n\n  try {\n    // Build command for agentic-flow\n    const cmd = buildAgenticFlowCommand(agentType, task, flags);\n    console.log('\\n‚è≥ Running agent... (this may take a moment)\\n');\n\n    // Execute agentic-flow\n    const { stdout, stderr } = await execAsync(cmd, {\n      timeout: flags.timeout || 300000,\n      maxBuffer: 10 * 1024 * 1024,\n    });\n\n    if (stdout) {\n      console.log(stdout);\n    }\n\n    if (stderr && flags.verbose) {\n      console.warn('\\nWarnings:', stderr);\n    }\n\n    printSuccess('‚úÖ Agent task completed successfully!');\n  } catch (error) {\n    printError('‚ùå Agent execution failed');\n    console.error(error.message);\n    if (error.stderr) {\n      console.error('Error details:', error.stderr);\n    }\n    process.exit(1);\n  }\n}\n\nfunction buildAgenticFlowCommand(agent, task, flags) {\n  const parts = ['npx', 'agentic-flow'];\n\n  // Agentic-flow uses --agent flag directly (no 'execute' subcommand)\n  parts.push('--agent', agent);\n  parts.push('--task', `\"${task.replace(/\"/g, '\\\\\"')}\"`);\n\n  if (flags.provider) {\n    parts.push('--provider', flags.provider);\n  }\n\n  if (flags.model) {\n    parts.push('--model', flags.model);\n  }\n\n  if (flags.temperature) {\n    parts.push('--temperature', flags.temperature);\n  }\n\n  if (flags.maxTokens) {\n    parts.push('--max-tokens', flags.maxTokens);\n  }\n\n  if (flags.format) {\n    parts.push('--output-format', flags.format);\n  }\n\n  if (flags.stream) {\n    parts.push('--stream');\n  }\n\n  if (flags.verbose) {\n    parts.push('--verbose');\n  }\n\n  return parts.join(' ');\n}\n\nasync function listAgenticFlowAgents(subArgs, flags) {\n  printSuccess('üìã Loading available agentic-flow agents...');\n\n  try {\n    // Agentic-flow uses 'agent list' command\n    const { stdout } = await execAsync('npx agentic-flow agent list', {\n      timeout: 30000,\n    });\n\n    console.log('\\n66+ Available Agents:\\n');\n    console.log(stdout);\n    console.log('\\nUsage:');\n    console.log('  claude-flow agent run <agent-type> \"<task>\"');\n    console.log('\\nExamples:');\n    console.log('  claude-flow agent run coder \"Build a REST API with authentication\"');\n    console.log('  claude-flow agent run security-auditor \"Review this code for vulnerabilities\"');\n    console.log('  claude-flow agent run full-stack-developer \"Create a Next.js app\"');\n  } catch (error) {\n    printError('Failed to load agentic-flow agents');\n    console.error('Make sure agentic-flow is installed: npm install -g agentic-flow');\n    console.error(error.message);\n  }\n}\n\nasync function spawnAgent(subArgs, flags) {\n  const agentType = subArgs[1] || 'general';\n  const agentName = getFlag(subArgs, '--name') || flags.name || `agent-${Date.now()}`;\n  const agentId = `${agentType}-${Date.now()}`;\n\n  // Create the agent object\n  const agent = {\n    id: agentId,\n    name: agentName,\n    type: agentType,\n    status: 'active',\n    activeTasks: 0,\n    lastActivity: Date.now(),\n    capabilities: getAgentCapabilities(agentType),\n    createdAt: Date.now()\n  };\n\n  // Store agent in session/agents directory\n  const { promises: fs } = await import('fs');\n  const path = await import('path');\n  \n  // Ensure agents directory exists\n  const agentsDir = '.claude-flow/agents';\n  await fs.mkdir(agentsDir, { recursive: true });\n  \n  // Save agent data\n  const agentFile = path.join(agentsDir, `${agentId}.json`);\n  await fs.writeFile(agentFile, JSON.stringify(agent, null, 2));\n  \n  // Update performance metrics\n  const perfFile = '.claude-flow/metrics/performance.json';\n  try {\n    const perfData = JSON.parse(await fs.readFile(perfFile, 'utf8'));\n    perfData.totalAgents = (perfData.totalAgents || 0) + 1;\n    perfData.activeAgents = (perfData.activeAgents || 0) + 1;\n    await fs.writeFile(perfFile, JSON.stringify(perfData, null, 2));\n  } catch (e) {\n    // Create new performance file if doesn't exist\n    await fs.writeFile(perfFile, JSON.stringify({\n      startTime: Date.now(),\n      totalTasks: 0,\n      successfulTasks: 0,\n      failedTasks: 0,\n      totalAgents: 1,\n      activeAgents: 1,\n      neuralEvents: 0\n    }, null, 2));\n  }\n\n  printSuccess(`‚úÖ Spawned ${agentType} agent: ${agentName}`);\n  console.log('ü§ñ Agent successfully created:');\n  console.log(`   ID: ${agentId}`);\n  console.log(`   Type: ${agentType}`);\n  console.log(`   Name: ${agentName}`);\n  console.log(`   Capabilities: ${agent.capabilities.join(', ')}`);\n  console.log(`   Status: ${agent.status}`);\n  console.log(`   Location: ${agentFile}`);\n  \n  // Track agent spawn for performance metrics\n  await onAgentSpawn(agentId, agentType, { name: agentName });\n}\n\nfunction getAgentCapabilities(type) {\n  const capabilities = {\n    researcher: ['Research', 'Analysis', 'Information Gathering', 'Documentation'],\n    coder: ['Code Generation', 'Implementation', 'Refactoring', 'Debugging'],\n    tester: ['Testing', 'Validation', 'Quality Assurance', 'Performance Testing'],\n    analyst: ['Data Analysis', 'Pattern Recognition', 'Reporting', 'Optimization'],\n    coordinator: ['Task Management', 'Workflow Orchestration', 'Resource Allocation'],\n    general: ['Research', 'Analysis', 'Code Generation']\n  };\n  return capabilities[type] || capabilities.general;\n}\n\nasync function listAgents(subArgs, flags) {\n  const { promises: fs } = await import('fs');\n  const path = await import('path');\n  \n  const agentsDir = '.claude-flow/agents';\n  const agents = [];\n  \n  try {\n    const agentFiles = await fs.readdir(agentsDir);\n    for (const file of agentFiles) {\n      if (file.endsWith('.json')) {\n        try {\n          const content = await fs.readFile(path.join(agentsDir, file), 'utf8');\n          const agent = JSON.parse(content);\n          agents.push(agent);\n        } catch {\n          // Skip invalid agent files\n        }\n      }\n    }\n  } catch {\n    // Agents directory doesn't exist yet\n  }\n  \n  if (agents.length > 0) {\n    printSuccess(`Active agents (${agents.length}):`);\n    agents.forEach(agent => {\n      const statusEmoji = agent.status === 'active' ? 'üü¢' : 'üü°';\n      console.log(`${statusEmoji} ${agent.name} (${agent.type})`);\n      console.log(`   ID: ${agent.id}`);\n      console.log(`   Status: ${agent.status}`);\n      console.log(`   Tasks: ${agent.activeTasks}`);\n      console.log(`   Created: ${new Date(agent.createdAt).toLocaleString()}`);\n      console.log('');\n    });\n  } else {\n    console.log('üìã No agents currently active');\n    console.log('\\nTo create agents:');\n    console.log('  claude-flow agent spawn researcher --name \"ResearchBot\"');\n    console.log('  claude-flow agent spawn coder --name \"CodeBot\"');\n    console.log('  claude-flow agent spawn analyst --name \"DataBot\"');\n  }\n}\n\nasync function manageHierarchy(subArgs, flags) {\n  const hierarchyCmd = subArgs[1];\n\n  switch (hierarchyCmd) {\n    case 'create':\n      const hierarchyType = subArgs[2] || 'basic';\n      printSuccess(`Creating ${hierarchyType} agent hierarchy`);\n      console.log('üèóÔ∏è  Hierarchy structure would include:');\n      console.log('   - Coordinator Agent (manages workflow)');\n      console.log('   - Specialist Agents (domain-specific tasks)');\n      console.log('   - Worker Agents (execution tasks)');\n      break;\n\n    case 'show':\n      printSuccess('Current agent hierarchy:');\n      console.log('üìä No hierarchy configured (orchestrator not running)');\n      break;\n\n    default:\n      console.log('Hierarchy commands: create, show');\n      console.log('Examples:');\n      console.log('  claude-flow agent hierarchy create enterprise');\n      console.log('  claude-flow agent hierarchy show');\n  }\n}\n\nasync function manageNetwork(subArgs, flags) {\n  const networkCmd = subArgs[1];\n\n  switch (networkCmd) {\n    case 'topology':\n      printSuccess('Agent network topology:');\n      console.log('üåê Network visualization would show agent connections');\n      break;\n\n    case 'metrics':\n      printSuccess('Network performance metrics:');\n      console.log('üìà Communication latency, throughput, reliability stats');\n      break;\n\n    default:\n      console.log('Network commands: topology, metrics');\n  }\n}\n\nasync function manageEcosystem(subArgs, flags) {\n  const ecosystemCmd = subArgs[1];\n\n  switch (ecosystemCmd) {\n    case 'status':\n      printSuccess('Agent ecosystem status:');\n      console.log('üå± Ecosystem health: Not running');\n      console.log('   Active Agents: 0');\n      console.log('   Resource Usage: 0%');\n      console.log('   Task Queue: Empty');\n      break;\n\n    case 'optimize':\n      printSuccess('Optimizing agent ecosystem...');\n      console.log('‚ö° Optimization would include:');\n      console.log('   - Load balancing across agents');\n      console.log('   - Resource allocation optimization');\n      console.log('   - Communication path optimization');\n      break;\n\n    default:\n      console.log('Ecosystem commands: status, optimize');\n  }\n}\n\nasync function provisionAgent(subArgs, flags) {\n  const provision = subArgs[1];\n\n  if (!provision) {\n    printError('Usage: agent provision <count>');\n    return;\n  }\n\n  const count = parseInt(provision);\n  if (isNaN(count) || count < 1) {\n    printError('Count must be a positive number');\n    return;\n  }\n\n  printSuccess(`Provisioning ${count} agents...`);\n  console.log('üöÄ Auto-provisioning would create:');\n  for (let i = 1; i <= count; i++) {\n    console.log(`   Agent ${i}: Type=general, Status=provisioning`);\n  }\n}\n\nasync function terminateAgent(subArgs, flags) {\n  const agentId = subArgs[1];\n\n  if (!agentId) {\n    printError('Usage: agent terminate <agent-id>');\n    return;\n  }\n\n  printSuccess(`Terminating agent: ${agentId}`);\n  console.log('üõë Agent would be gracefully shut down');\n}\n\nasync function showAgentInfo(subArgs, flags) {\n  const agentId = subArgs[1];\n\n  if (!agentId) {\n    printError('Usage: agent info <agent-id>');\n    return;\n  }\n\n  printSuccess(`Agent information: ${agentId}`);\n  console.log('üìä Agent details would include:');\n  console.log('   Status, capabilities, current tasks, performance metrics');\n}\n\nfunction getFlag(args, flagName) {\n  const index = args.indexOf(flagName);\n  return index !== -1 && index + 1 < args.length ? args[index + 1] : null;\n}\n\nfunction showAgentHelp() {\n  console.log('Agent commands:');\n  console.log('\\nüöÄ Agentic-Flow Integration (NEW in v2.6.0):');\n  console.log('  run <agent> \"<task>\" [options]   Execute agent with multi-provider support');\n  console.log('  agents                           List all 66+ agentic-flow agents');\n  console.log('\\nü§ñ Internal Agent Management:');\n  console.log('  spawn <type> [--name <name>]     Create internal agent');\n  console.log('  list [--verbose]                 List active internal agents');\n  console.log('  terminate <id>                   Stop specific agent');\n  console.log('  info <id>                        Show agent details');\n  console.log('  hierarchy <create|show>          Manage agent hierarchies');\n  console.log('  network <topology|metrics>       Agent network operations');\n  console.log('  ecosystem <status|optimize>      Ecosystem management');\n  console.log('  provision <count>                Auto-provision agents');\n  console.log();\n  console.log('Execution Options (for run command):');\n  console.log('  --provider <provider>            Provider: anthropic, openrouter, onnx, gemini');\n  console.log('  --model <model>                  Specific model to use');\n  console.log('  --temperature <temp>             Temperature (0.0-1.0)');\n  console.log('  --max-tokens <tokens>            Maximum tokens');\n  console.log('  --format <format>                Output format: text, json, markdown');\n  console.log('  --stream                         Enable streaming');\n  console.log('  --verbose                        Verbose output');\n  console.log();\n  console.log('Internal Agent Types:');\n  console.log('  researcher    Research and information gathering');\n  console.log('  coder         Code development and analysis');\n  console.log('  analyst       Data analysis and insights');\n  console.log('  coordinator   Task coordination and management');\n  console.log('  general       Multi-purpose agent');\n  console.log();\n  console.log('Examples:');\n  console.log('\\n  # Execute with agentic-flow (multi-provider)');\n  console.log('  claude-flow agent run coder \"Build REST API with authentication\"');\n  console.log('  claude-flow agent run researcher \"Research React 19 features\" --provider openrouter');\n  console.log('  claude-flow agent run security-auditor \"Audit code\" --provider onnx');\n  console.log('  claude-flow agent agents  # List all available agents');\n  console.log('\\n  # Internal agent management');\n  console.log('  claude-flow agent spawn researcher --name \"DataBot\"');\n  console.log('  claude-flow agent list --verbose');\n  console.log('  claude-flow agent hierarchy create enterprise');\n}\n"],"names":["printSuccess","printError","onAgentSpawn","exec","promisify","execAsync","agentCommand","subArgs","flags","agentCmd","executeAgentTask","spawnAgent","listAgents","listAgenticFlowAgents","manageHierarchy","manageNetwork","manageEcosystem","provisionAgent","terminateAgent","showAgentInfo","showAgentHelp","agentType","task","console","log","provider","cmd","buildAgenticFlowCommand","stdout","stderr","timeout","maxBuffer","verbose","warn","error","message","process","exit","agent","parts","push","replace","model","temperature","maxTokens","format","stream","join","agentName","getFlag","name","Date","now","agentId","id","type","status","activeTasks","lastActivity","capabilities","getAgentCapabilities","createdAt","promises","fs","path","agentsDir","mkdir","recursive","agentFile","writeFile","JSON","stringify","perfFile","perfData","parse","readFile","totalAgents","activeAgents","e","startTime","totalTasks","successfulTasks","failedTasks","neuralEvents","researcher","coder","tester","analyst","coordinator","general","agents","agentFiles","readdir","file","endsWith","content","length","forEach","statusEmoji","toLocaleString","hierarchyCmd","hierarchyType","networkCmd","ecosystemCmd","provision","count","parseInt","isNaN","i","args","flagName","index","indexOf"],"mappings":"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"}