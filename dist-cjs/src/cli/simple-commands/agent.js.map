{"version":3,"sources":["../../../../src/cli/simple-commands/agent.js"],"sourcesContent":["// agent.js - Agent management commands\nimport { printSuccess, printError, printWarning } from '../utils.js';\nimport { onAgentSpawn, onAgentAction } from './performance-hooks.js';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\nexport async function agentCommand(subArgs, flags) {\n  const agentCmd = subArgs[0];\n\n  switch (agentCmd) {\n    case 'run':\n    case 'execute':\n      await executeAgentTask(subArgs, flags);\n      break;\n\n    case 'spawn':\n      await spawnAgent(subArgs, flags);\n      break;\n\n    case 'list':\n      await listAgents(subArgs, flags);\n      break;\n\n    case 'agents':\n      await listAgenticFlowAgents(subArgs, flags);\n      break;\n\n    case 'memory':\n      await memoryCommand(subArgs, flags);\n      break;\n\n    case 'hierarchy':\n      await manageHierarchy(subArgs, flags);\n      break;\n\n    case 'network':\n      await manageNetwork(subArgs, flags);\n      break;\n\n    case 'ecosystem':\n      await manageEcosystem(subArgs, flags);\n      break;\n\n    case 'provision':\n      await provisionAgent(subArgs, flags);\n      break;\n\n    case 'terminate':\n      await terminateAgent(subArgs, flags);\n      break;\n\n    case 'info':\n      await showAgentInfo(subArgs, flags);\n      break;\n\n    default:\n      showAgentHelp();\n  }\n}\n\nasync function executeAgentTask(subArgs, flags) {\n  const agentType = subArgs[1];\n  const task = subArgs[2];\n\n  if (!agentType || !task) {\n    printError('Usage: agent run <agent-type> \"<task>\" [--provider <provider>] [--model <model>]');\n    console.log('\\nExamples:');\n    console.log('  claude-flow agent run coder \"Create a REST API\"');\n    console.log('  claude-flow agent run researcher \"Research AI trends\" --provider openrouter');\n    console.log('  claude-flow agent run reviewer \"Review code for security\" --provider onnx');\n    return;\n  }\n\n  printSuccess(`üöÄ Executing ${agentType} agent with agentic-flow...`);\n  console.log(`Task: ${task}`);\n\n  const provider = flags.provider || 'anthropic';\n  if (flags.provider) {\n    console.log(`Provider: ${provider}`);\n  }\n\n  try {\n    // Build command for agentic-flow\n    const cmd = buildAgenticFlowCommand(agentType, task, flags);\n    console.log('\\n‚è≥ Running agent... (this may take a moment)\\n');\n\n    // Execute agentic-flow\n    const { stdout, stderr } = await execAsync(cmd, {\n      timeout: flags.timeout || 300000,\n      maxBuffer: 10 * 1024 * 1024,\n    });\n\n    if (stdout) {\n      console.log(stdout);\n    }\n\n    if (stderr && flags.verbose) {\n      console.warn('\\nWarnings:', stderr);\n    }\n\n    printSuccess('‚úÖ Agent task completed successfully!');\n  } catch (error) {\n    printError('‚ùå Agent execution failed');\n    console.error(error.message);\n    if (error.stderr) {\n      console.error('Error details:', error.stderr);\n    }\n    process.exit(1);\n  }\n}\n\nfunction buildAgenticFlowCommand(agent, task, flags) {\n  const parts = ['npx', 'agentic-flow'];\n\n  // Agentic-flow uses --agent flag directly (no 'execute' subcommand)\n  parts.push('--agent', agent);\n  parts.push('--task', `\"${task.replace(/\"/g, '\\\\\"')}\"`);\n\n  if (flags.provider) {\n    parts.push('--provider', flags.provider);\n  }\n\n  if (flags.model) {\n    parts.push('--model', flags.model);\n  }\n\n  if (flags.temperature) {\n    parts.push('--temperature', flags.temperature);\n  }\n\n  if (flags.maxTokens) {\n    parts.push('--max-tokens', flags.maxTokens);\n  }\n\n  if (flags.format) {\n    parts.push('--output-format', flags.format);\n  }\n\n  if (flags.stream) {\n    parts.push('--stream');\n  }\n\n  if (flags.verbose) {\n    parts.push('--verbose');\n  }\n\n  // ReasoningBank memory options (NEW in v2.6.0)\n  if (flags.enableMemory || flags.memory) {\n    parts.push('--enable-memory');\n  }\n\n  if (flags.memoryDb || flags.memoryDatabase) {\n    parts.push('--memory-db', flags.memoryDb || flags.memoryDatabase);\n  }\n\n  if (flags.memoryK) {\n    parts.push('--memory-k', flags.memoryK);\n  }\n\n  if (flags.memoryDomain) {\n    parts.push('--memory-domain', flags.memoryDomain);\n  }\n\n  if (flags.memoryLearning === false) {\n    parts.push('--no-memory-learning');\n  }\n\n  if (flags.memoryMinConfidence) {\n    parts.push('--memory-min-confidence', flags.memoryMinConfidence);\n  }\n\n  if (flags.memoryTaskId) {\n    parts.push('--memory-task-id', flags.memoryTaskId);\n  }\n\n  return parts.join(' ');\n}\n\nasync function listAgenticFlowAgents(subArgs, flags) {\n  printSuccess('üìã Loading available agentic-flow agents...');\n\n  try {\n    // Agentic-flow uses 'agent list' command\n    const { stdout } = await execAsync('npx agentic-flow agent list', {\n      timeout: 30000,\n    });\n\n    console.log('\\n66+ Available Agents:\\n');\n    console.log(stdout);\n    console.log('\\nUsage:');\n    console.log('  claude-flow agent run <agent-type> \"<task>\"');\n    console.log('\\nExamples:');\n    console.log('  claude-flow agent run coder \"Build a REST API with authentication\"');\n    console.log('  claude-flow agent run security-auditor \"Review this code for vulnerabilities\"');\n    console.log('  claude-flow agent run full-stack-developer \"Create a Next.js app\"');\n  } catch (error) {\n    printError('Failed to load agentic-flow agents');\n    console.error('Make sure agentic-flow is installed: npm install -g agentic-flow');\n    console.error(error.message);\n  }\n}\n\nasync function memoryCommand(subArgs, flags) {\n  const memoryCmd = subArgs[1];\n\n  switch (memoryCmd) {\n    case 'init':\n    case 'initialize':\n      await initializeMemory(subArgs, flags);\n      break;\n\n    case 'status':\n    case 'info':\n      await getMemoryStatus(subArgs, flags);\n      break;\n\n    case 'consolidate':\n    case 'prune':\n      await consolidateMemory(subArgs, flags);\n      break;\n\n    case 'list':\n    case 'ls':\n      await listMemories(subArgs, flags);\n      break;\n\n    case 'demo':\n      await runMemoryDemo(subArgs, flags);\n      break;\n\n    case 'test':\n      await runMemoryTest(subArgs, flags);\n      break;\n\n    case 'benchmark':\n      await runMemoryBenchmark(subArgs, flags);\n      break;\n\n    default:\n      showMemoryHelp();\n  }\n}\n\nasync function initializeMemory(subArgs, flags) {\n  const dbPath = flags.db || flags.database || '.swarm/memory.db';\n\n  printSuccess('üß† Initializing ReasoningBank memory system...');\n  console.log(`Database: ${dbPath}`);\n\n  try {\n    const { stdout, stderr } = await execAsync('npx agentic-flow reasoningbank init', {\n      timeout: 30000,\n    });\n\n    if (stdout) {\n      console.log(stdout);\n    }\n\n    printSuccess('‚úÖ ReasoningBank initialized successfully!');\n    console.log('\\nNext steps:');\n    console.log('  1. Run agents with --enable-memory flag');\n    console.log('  2. Check status: claude-flow agent memory status');\n    console.log('  3. View demo: claude-flow agent memory demo');\n  } catch (error) {\n    printError('‚ùå Failed to initialize ReasoningBank');\n    console.error(error.message);\n    if (error.stderr) {\n      console.error('Details:', error.stderr);\n    }\n    process.exit(1);\n  }\n}\n\nasync function getMemoryStatus(subArgs, flags) {\n  printSuccess('üß† ReasoningBank Status:');\n\n  try {\n    const { stdout } = await execAsync('npx agentic-flow reasoningbank status', {\n      timeout: 30000,\n    });\n\n    console.log(stdout);\n  } catch (error) {\n    printError('‚ùå Failed to get memory status');\n    console.error(error.message);\n    console.log('\\nTip: Initialize first with: claude-flow agent memory init');\n    process.exit(1);\n  }\n}\n\nasync function consolidateMemory(subArgs, flags) {\n  printSuccess('üß† Consolidating ReasoningBank memories...');\n  console.log('This will deduplicate and prune old/low-quality memories');\n\n  try {\n    const { stdout } = await execAsync('npx agentic-flow reasoningbank consolidate', {\n      timeout: 60000,\n    });\n\n    console.log(stdout);\n    printSuccess('‚úÖ Memory consolidation complete!');\n  } catch (error) {\n    printError('‚ùå Consolidation failed');\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nasync function listMemories(subArgs, flags) {\n  const domain = flags.domain;\n  const limit = flags.limit || 10;\n\n  printSuccess(`üß† Listing ReasoningBank memories (limit: ${limit})`);\n  if (domain) {\n    console.log(`Domain filter: ${domain}`);\n  }\n\n  try {\n    let cmd = 'npx agentic-flow reasoningbank list';\n    if (domain) {\n      cmd += ` --domain ${domain}`;\n    }\n    cmd += ` --limit ${limit}`;\n\n    const { stdout } = await execAsync(cmd, {\n      timeout: 30000,\n    });\n\n    console.log(stdout);\n  } catch (error) {\n    printError('‚ùå Failed to list memories');\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nasync function runMemoryDemo(subArgs, flags) {\n  printSuccess('üéØ Running ReasoningBank demo...');\n  console.log('This will show how memory improves task success over time\\n');\n\n  try {\n    const { stdout } = await execAsync('npx agentic-flow reasoningbank demo', {\n      timeout: 120000,\n    });\n\n    console.log(stdout);\n    printSuccess('‚úÖ Demo complete!');\n  } catch (error) {\n    printError('‚ùå Demo failed');\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nasync function runMemoryTest(subArgs, flags) {\n  printSuccess('üß™ Running ReasoningBank integration tests...');\n\n  try {\n    const { stdout } = await execAsync('npx agentic-flow reasoningbank test', {\n      timeout: 120000,\n    });\n\n    console.log(stdout);\n    printSuccess('‚úÖ Tests complete!');\n  } catch (error) {\n    printError('‚ùå Tests failed');\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nasync function runMemoryBenchmark(subArgs, flags) {\n  printSuccess('‚ö° Running ReasoningBank performance benchmarks...');\n\n  try {\n    const { stdout } = await execAsync('npx agentic-flow reasoningbank benchmark', {\n      timeout: 120000,\n    });\n\n    console.log(stdout);\n    printSuccess('‚úÖ Benchmarks complete!');\n  } catch (error) {\n    printError('‚ùå Benchmark failed');\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nfunction showMemoryHelp() {\n  console.log('Memory (ReasoningBank) commands:');\n  console.log('  init                             Initialize ReasoningBank database');\n  console.log('  status                           Show memory system status');\n  console.log('  consolidate                      Deduplicate and prune memories');\n  console.log('  list [--domain <domain>]         List stored memories');\n  console.log('  demo                             Run interactive demo');\n  console.log('  test                             Run integration tests');\n  console.log('  benchmark                        Run performance benchmarks');\n  console.log();\n  console.log('Options:');\n  console.log('  --db, --database <path>          Database path [default: .swarm/memory.db]');\n  console.log('  --domain <domain>                Filter by domain');\n  console.log('  --limit <n>                      Limit results [default: 10]');\n  console.log();\n  console.log('Examples:');\n  console.log('  claude-flow agent memory init');\n  console.log('  claude-flow agent memory status');\n  console.log('  claude-flow agent memory list --domain web --limit 5');\n  console.log('  claude-flow agent memory consolidate');\n  console.log('  claude-flow agent memory demo');\n}\n\nasync function spawnAgent(subArgs, flags) {\n  const agentType = subArgs[1] || 'general';\n  const agentName = getFlag(subArgs, '--name') || flags.name || `agent-${Date.now()}`;\n  const agentId = `${agentType}-${Date.now()}`;\n\n  // Create the agent object\n  const agent = {\n    id: agentId,\n    name: agentName,\n    type: agentType,\n    status: 'active',\n    activeTasks: 0,\n    lastActivity: Date.now(),\n    capabilities: getAgentCapabilities(agentType),\n    createdAt: Date.now()\n  };\n\n  // Store agent in session/agents directory\n  const { promises: fs } = await import('fs');\n  const path = await import('path');\n  \n  // Ensure agents directory exists\n  const agentsDir = '.claude-flow/agents';\n  await fs.mkdir(agentsDir, { recursive: true });\n  \n  // Save agent data\n  const agentFile = path.join(agentsDir, `${agentId}.json`);\n  await fs.writeFile(agentFile, JSON.stringify(agent, null, 2));\n  \n  // Update performance metrics\n  const perfFile = '.claude-flow/metrics/performance.json';\n  try {\n    const perfData = JSON.parse(await fs.readFile(perfFile, 'utf8'));\n    perfData.totalAgents = (perfData.totalAgents || 0) + 1;\n    perfData.activeAgents = (perfData.activeAgents || 0) + 1;\n    await fs.writeFile(perfFile, JSON.stringify(perfData, null, 2));\n  } catch (e) {\n    // Create new performance file if doesn't exist\n    await fs.writeFile(perfFile, JSON.stringify({\n      startTime: Date.now(),\n      totalTasks: 0,\n      successfulTasks: 0,\n      failedTasks: 0,\n      totalAgents: 1,\n      activeAgents: 1,\n      neuralEvents: 0\n    }, null, 2));\n  }\n\n  printSuccess(`‚úÖ Spawned ${agentType} agent: ${agentName}`);\n  console.log('ü§ñ Agent successfully created:');\n  console.log(`   ID: ${agentId}`);\n  console.log(`   Type: ${agentType}`);\n  console.log(`   Name: ${agentName}`);\n  console.log(`   Capabilities: ${agent.capabilities.join(', ')}`);\n  console.log(`   Status: ${agent.status}`);\n  console.log(`   Location: ${agentFile}`);\n  \n  // Track agent spawn for performance metrics\n  await onAgentSpawn(agentId, agentType, { name: agentName });\n}\n\nfunction getAgentCapabilities(type) {\n  const capabilities = {\n    researcher: ['Research', 'Analysis', 'Information Gathering', 'Documentation'],\n    coder: ['Code Generation', 'Implementation', 'Refactoring', 'Debugging'],\n    tester: ['Testing', 'Validation', 'Quality Assurance', 'Performance Testing'],\n    analyst: ['Data Analysis', 'Pattern Recognition', 'Reporting', 'Optimization'],\n    coordinator: ['Task Management', 'Workflow Orchestration', 'Resource Allocation'],\n    general: ['Research', 'Analysis', 'Code Generation']\n  };\n  return capabilities[type] || capabilities.general;\n}\n\nasync function listAgents(subArgs, flags) {\n  const { promises: fs } = await import('fs');\n  const path = await import('path');\n  \n  const agentsDir = '.claude-flow/agents';\n  const agents = [];\n  \n  try {\n    const agentFiles = await fs.readdir(agentsDir);\n    for (const file of agentFiles) {\n      if (file.endsWith('.json')) {\n        try {\n          const content = await fs.readFile(path.join(agentsDir, file), 'utf8');\n          const agent = JSON.parse(content);\n          agents.push(agent);\n        } catch {\n          // Skip invalid agent files\n        }\n      }\n    }\n  } catch {\n    // Agents directory doesn't exist yet\n  }\n  \n  if (agents.length > 0) {\n    printSuccess(`Active agents (${agents.length}):`);\n    agents.forEach(agent => {\n      const statusEmoji = agent.status === 'active' ? 'üü¢' : 'üü°';\n      console.log(`${statusEmoji} ${agent.name} (${agent.type})`);\n      console.log(`   ID: ${agent.id}`);\n      console.log(`   Status: ${agent.status}`);\n      console.log(`   Tasks: ${agent.activeTasks}`);\n      console.log(`   Created: ${new Date(agent.createdAt).toLocaleString()}`);\n      console.log('');\n    });\n  } else {\n    console.log('üìã No agents currently active');\n    console.log('\\nTo create agents:');\n    console.log('  claude-flow agent spawn researcher --name \"ResearchBot\"');\n    console.log('  claude-flow agent spawn coder --name \"CodeBot\"');\n    console.log('  claude-flow agent spawn analyst --name \"DataBot\"');\n  }\n}\n\nasync function manageHierarchy(subArgs, flags) {\n  const hierarchyCmd = subArgs[1];\n\n  switch (hierarchyCmd) {\n    case 'create':\n      const hierarchyType = subArgs[2] || 'basic';\n      printSuccess(`Creating ${hierarchyType} agent hierarchy`);\n      console.log('üèóÔ∏è  Hierarchy structure would include:');\n      console.log('   - Coordinator Agent (manages workflow)');\n      console.log('   - Specialist Agents (domain-specific tasks)');\n      console.log('   - Worker Agents (execution tasks)');\n      break;\n\n    case 'show':\n      printSuccess('Current agent hierarchy:');\n      console.log('üìä No hierarchy configured (orchestrator not running)');\n      break;\n\n    default:\n      console.log('Hierarchy commands: create, show');\n      console.log('Examples:');\n      console.log('  claude-flow agent hierarchy create enterprise');\n      console.log('  claude-flow agent hierarchy show');\n  }\n}\n\nasync function manageNetwork(subArgs, flags) {\n  const networkCmd = subArgs[1];\n\n  switch (networkCmd) {\n    case 'topology':\n      printSuccess('Agent network topology:');\n      console.log('üåê Network visualization would show agent connections');\n      break;\n\n    case 'metrics':\n      printSuccess('Network performance metrics:');\n      console.log('üìà Communication latency, throughput, reliability stats');\n      break;\n\n    default:\n      console.log('Network commands: topology, metrics');\n  }\n}\n\nasync function manageEcosystem(subArgs, flags) {\n  const ecosystemCmd = subArgs[1];\n\n  switch (ecosystemCmd) {\n    case 'status':\n      printSuccess('Agent ecosystem status:');\n      console.log('üå± Ecosystem health: Not running');\n      console.log('   Active Agents: 0');\n      console.log('   Resource Usage: 0%');\n      console.log('   Task Queue: Empty');\n      break;\n\n    case 'optimize':\n      printSuccess('Optimizing agent ecosystem...');\n      console.log('‚ö° Optimization would include:');\n      console.log('   - Load balancing across agents');\n      console.log('   - Resource allocation optimization');\n      console.log('   - Communication path optimization');\n      break;\n\n    default:\n      console.log('Ecosystem commands: status, optimize');\n  }\n}\n\nasync function provisionAgent(subArgs, flags) {\n  const provision = subArgs[1];\n\n  if (!provision) {\n    printError('Usage: agent provision <count>');\n    return;\n  }\n\n  const count = parseInt(provision);\n  if (isNaN(count) || count < 1) {\n    printError('Count must be a positive number');\n    return;\n  }\n\n  printSuccess(`Provisioning ${count} agents...`);\n  console.log('üöÄ Auto-provisioning would create:');\n  for (let i = 1; i <= count; i++) {\n    console.log(`   Agent ${i}: Type=general, Status=provisioning`);\n  }\n}\n\nasync function terminateAgent(subArgs, flags) {\n  const agentId = subArgs[1];\n\n  if (!agentId) {\n    printError('Usage: agent terminate <agent-id>');\n    return;\n  }\n\n  printSuccess(`Terminating agent: ${agentId}`);\n  console.log('üõë Agent would be gracefully shut down');\n}\n\nasync function showAgentInfo(subArgs, flags) {\n  const agentId = subArgs[1];\n\n  if (!agentId) {\n    printError('Usage: agent info <agent-id>');\n    return;\n  }\n\n  printSuccess(`Agent information: ${agentId}`);\n  console.log('üìä Agent details would include:');\n  console.log('   Status, capabilities, current tasks, performance metrics');\n}\n\nfunction getFlag(args, flagName) {\n  const index = args.indexOf(flagName);\n  return index !== -1 && index + 1 < args.length ? args[index + 1] : null;\n}\n\nfunction showAgentHelp() {\n  console.log('Agent commands:');\n  console.log('\\nüöÄ Agentic-Flow Integration (NEW in v2.6.0):');\n  console.log('  run <agent> \"<task>\" [options]   Execute agent with multi-provider support');\n  console.log('  agents                           List all 66+ agentic-flow agents');\n  console.log('\\nüß† ReasoningBank Memory (NEW in v2.6.0):');\n  console.log('  memory init                      Initialize memory system');\n  console.log('  memory status                    Show memory statistics');\n  console.log('  memory consolidate               Prune and deduplicate memories');\n  console.log('  memory list                      List stored memories');\n  console.log('  memory demo                      Run interactive demo');\n  console.log('\\nü§ñ Internal Agent Management:');\n  console.log('  spawn <type> [--name <name>]     Create internal agent');\n  console.log('  list [--verbose]                 List active internal agents');\n  console.log('  terminate <id>                   Stop specific agent');\n  console.log('  info <id>                        Show agent details');\n  console.log('  hierarchy <create|show>          Manage agent hierarchies');\n  console.log('  network <topology|metrics>       Agent network operations');\n  console.log('  ecosystem <status|optimize>      Ecosystem management');\n  console.log('  provision <count>                Auto-provision agents');\n  console.log();\n  console.log('Execution Options (for run command):');\n  console.log('  --provider <provider>            Provider: anthropic, openrouter, onnx, gemini');\n  console.log('  --model <model>                  Specific model to use');\n  console.log('  --temperature <temp>             Temperature (0.0-1.0)');\n  console.log('  --max-tokens <tokens>            Maximum tokens');\n  console.log('  --format <format>                Output format: text, json, markdown');\n  console.log('  --stream                         Enable streaming');\n  console.log('  --verbose                        Verbose output');\n  console.log();\n  console.log('Memory Options (NEW - for run command):');\n  console.log('  --enable-memory                  Enable ReasoningBank learning');\n  console.log('  --memory-db <path>               Memory database path [default: .swarm/memory.db]');\n  console.log('  --memory-k <n>                   Top-k memories to retrieve [default: 3]');\n  console.log('  --memory-domain <domain>         Domain filter for memories');\n  console.log('  --no-memory-learning             Disable post-task learning');\n  console.log('  --memory-min-confidence <n>      Min confidence threshold [default: 0.5]');\n  console.log('  --memory-task-id <id>            Custom task ID for tracking');\n  console.log();\n  console.log('Internal Agent Types:');\n  console.log('  researcher    Research and information gathering');\n  console.log('  coder         Code development and analysis');\n  console.log('  analyst       Data analysis and insights');\n  console.log('  coordinator   Task coordination and management');\n  console.log('  general       Multi-purpose agent');\n  console.log();\n  console.log('Examples:');\n  console.log('\\n  # Execute with agentic-flow (multi-provider)');\n  console.log('  claude-flow agent run coder \"Build REST API with authentication\"');\n  console.log('  claude-flow agent run researcher \"Research React 19 features\" --provider openrouter');\n  console.log('  claude-flow agent run security-auditor \"Audit code\" --provider onnx');\n  console.log('  claude-flow agent agents  # List all available agents');\n  console.log('\\n  # Execute with ReasoningBank memory (learns from experience)');\n  console.log('  claude-flow agent run coder \"Build API\" --enable-memory');\n  console.log('  claude-flow agent run coder \"Add auth\" --enable-memory --memory-domain api');\n  console.log('  claude-flow agent run coder \"Fix bug\" --enable-memory --memory-k 5');\n  console.log('\\n  # Memory management');\n  console.log('  claude-flow agent memory init');\n  console.log('  claude-flow agent memory status');\n  console.log('  claude-flow agent memory list --domain api --limit 10');\n  console.log('  claude-flow agent memory consolidate');\n  console.log('  claude-flow agent memory demo  # See 23% ‚Üí 98% success improvement');\n  console.log('\\n  # Internal agent management');\n  console.log('  claude-flow agent spawn researcher --name \"DataBot\"');\n  console.log('  claude-flow agent list --verbose');\n  console.log('  claude-flow agent hierarchy create enterprise');\n}\n"],"names":["printSuccess","printError","onAgentSpawn","exec","promisify","execAsync","agentCommand","subArgs","flags","agentCmd","executeAgentTask","spawnAgent","listAgents","listAgenticFlowAgents","memoryCommand","manageHierarchy","manageNetwork","manageEcosystem","provisionAgent","terminateAgent","showAgentInfo","showAgentHelp","agentType","task","console","log","provider","cmd","buildAgenticFlowCommand","stdout","stderr","timeout","maxBuffer","verbose","warn","error","message","process","exit","agent","parts","push","replace","model","temperature","maxTokens","format","stream","enableMemory","memory","memoryDb","memoryDatabase","memoryK","memoryDomain","memoryLearning","memoryMinConfidence","memoryTaskId","join","memoryCmd","initializeMemory","getMemoryStatus","consolidateMemory","listMemories","runMemoryDemo","runMemoryTest","runMemoryBenchmark","showMemoryHelp","dbPath","db","database","domain","limit","agentName","getFlag","name","Date","now","agentId","id","type","status","activeTasks","lastActivity","capabilities","getAgentCapabilities","createdAt","promises","fs","path","agentsDir","mkdir","recursive","agentFile","writeFile","JSON","stringify","perfFile","perfData","parse","readFile","totalAgents","activeAgents","e","startTime","totalTasks","successfulTasks","failedTasks","neuralEvents","researcher","coder","tester","analyst","coordinator","general","agents","agentFiles","readdir","file","endsWith","content","length","forEach","statusEmoji","toLocaleString","hierarchyCmd","hierarchyType","networkCmd","ecosystemCmd","provision","count","parseInt","isNaN","i","args","flagName","index","indexOf"],"mappings":"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QC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;AACd"}