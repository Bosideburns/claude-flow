{"version":3,"sources":["../../../../src/cli/simple-commands/memory.js"],"sourcesContent":["// memory.js - Memory management commands\nimport { printSuccess, printError, printWarning, printInfo } from '../utils.js';\nimport { promises as fs } from 'fs';\nimport { cwd, exit, existsSync } from '../node-compat.js';\nimport { getUnifiedMemory } from '../../memory/unified-memory-manager.js';\nimport { KeyRedactor } from '../../utils/key-redactor.js';\n\nexport async function memoryCommand(subArgs, flags) {\n  const memorySubcommand = subArgs[0];\n  const memoryStore = './memory/memory-store.json';\n\n  // Extract namespace from flags or subArgs\n  const namespace = flags?.namespace || flags?.ns || getNamespaceFromArgs(subArgs) || 'default';\n\n  // Check for redaction flag\n  const enableRedaction = flags?.redact || subArgs.includes('--redact') || subArgs.includes('--secure');\n\n  // Helper to load memory data\n  async function loadMemory() {\n    try {\n      const content = await fs.readFile(memoryStore, 'utf8');\n      return JSON.parse(content);\n    } catch {\n      return {};\n    }\n  }\n\n  // Helper to save memory data\n  async function saveMemory(data) {\n    await fs.mkdir('./memory', { recursive: true });\n    await fs.writeFile(memoryStore, JSON.stringify(data, null, 2, 'utf8'));\n  }\n\n  switch (memorySubcommand) {\n    case 'store':\n      await storeMemory(subArgs, loadMemory, saveMemory, namespace, enableRedaction);\n      break;\n\n    case 'query':\n      await queryMemory(subArgs, loadMemory, namespace, enableRedaction);\n      break;\n\n    case 'stats':\n      await showMemoryStats(loadMemory);\n      break;\n\n    case 'export':\n      await exportMemory(subArgs, loadMemory, namespace);\n      break;\n\n    case 'import':\n      await importMemory(subArgs, saveMemory, loadMemory);\n      break;\n\n    case 'clear':\n      await clearMemory(subArgs, saveMemory, namespace);\n      break;\n\n    case 'list':\n      await listNamespaces(loadMemory);\n      break;\n\n    default:\n      showMemoryHelp();\n  }\n}\n\nasync function storeMemory(subArgs, loadMemory, saveMemory, namespace, enableRedaction = false) {\n  const key = subArgs[1];\n  let value = subArgs.slice(2).join(' ');\n\n  if (!key || !value) {\n    printError('Usage: memory store <key> <value> [--namespace <ns>] [--redact]');\n    return;\n  }\n\n  try {\n    // Apply redaction if enabled\n    let redactedValue = value;\n    let securityWarnings = [];\n\n    if (enableRedaction) {\n      redactedValue = KeyRedactor.redact(value, true);\n      const validation = KeyRedactor.validate(value);\n\n      if (!validation.safe) {\n        securityWarnings = validation.warnings;\n        printWarning('üîí Redaction enabled: Sensitive data detected and redacted');\n        securityWarnings.forEach(warning => console.log(`   ‚ö†Ô∏è  ${warning}`));\n      }\n    } else {\n      // Even if redaction is not explicitly enabled, validate and warn\n      const validation = KeyRedactor.validate(value);\n      if (!validation.safe) {\n        printWarning('‚ö†Ô∏è  Potential sensitive data detected! Use --redact flag for automatic redaction');\n        validation.warnings.forEach(warning => console.log(`   ‚ö†Ô∏è  ${warning}`));\n        console.log('   üí° Tip: Add --redact flag to automatically redact API keys');\n      }\n    }\n\n    const data = await loadMemory();\n\n    if (!data[namespace]) {\n      data[namespace] = [];\n    }\n\n    // Remove existing entry with same key\n    data[namespace] = data[namespace].filter((e) => e.key !== key);\n\n    // Add new entry with redacted value\n    data[namespace].push({\n      key,\n      value: redactedValue,\n      namespace,\n      timestamp: Date.now(),\n      redacted: enableRedaction && securityWarnings.length > 0,\n    });\n\n    await saveMemory(data);\n    printSuccess(enableRedaction && securityWarnings.length > 0 ? 'üîí Stored successfully (with redaction)' : '‚úÖ Stored successfully');\n    console.log(`üìù Key: ${key}`);\n    console.log(`üì¶ Namespace: ${namespace}`);\n    console.log(`üíæ Size: ${new TextEncoder().encode(redactedValue).length} bytes`);\n    if (enableRedaction && securityWarnings.length > 0) {\n      console.log(`üîí Security: ${securityWarnings.length} sensitive pattern(s) redacted`);\n    }\n  } catch (err) {\n    printError(`Failed to store: ${err.message}`);\n  }\n}\n\nasync function queryMemory(subArgs, loadMemory, namespace, enableRedaction = false) {\n  const search = subArgs.slice(1).join(' ');\n\n  if (!search) {\n    printError('Usage: memory query <search> [--namespace <ns>] [--redact]');\n    return;\n  }\n\n  try {\n    const data = await loadMemory();\n    const results = [];\n\n    for (const [ns, entries] of Object.entries(data)) {\n      if (namespace && ns !== namespace) continue;\n\n      for (const entry of entries) {\n        if (entry.key.includes(search) || entry.value.includes(search)) {\n          results.push(entry);\n        }\n      }\n    }\n\n    if (results.length === 0) {\n      printWarning('No results found');\n      return;\n    }\n\n    printSuccess(`Found ${results.length} results:`);\n\n    // Sort by timestamp (newest first)\n    results.sort((a, b) => b.timestamp - a.timestamp);\n\n    for (const entry of results.slice(0, 10)) {\n      console.log(`\\nüìå ${entry.key}`);\n      console.log(`   Namespace: ${entry.namespace}`);\n\n      // Apply redaction to displayed value if requested\n      let displayValue = entry.value;\n      if (enableRedaction) {\n        displayValue = KeyRedactor.redact(displayValue, true);\n      }\n\n      console.log(\n        `   Value: ${displayValue.substring(0, 100)}${displayValue.length > 100 ? '...' : ''}`,\n      );\n      console.log(`   Stored: ${new Date(entry.timestamp).toLocaleString()}`);\n\n      // Show redaction status\n      if (entry.redacted) {\n        console.log(`   üîí Status: Redacted on storage`);\n      } else if (enableRedaction) {\n        console.log(`   üîí Status: Redacted for display`);\n      }\n    }\n\n    if (results.length > 10) {\n      console.log(`\\n... and ${results.length - 10} more results`);\n    }\n  } catch (err) {\n    printError(`Failed to query: ${err.message}`);\n  }\n}\n\nasync function showMemoryStats(loadMemory) {\n  try {\n    const data = await loadMemory();\n    let totalEntries = 0;\n    const namespaceStats = {};\n\n    for (const [namespace, entries] of Object.entries(data)) {\n      namespaceStats[namespace] = entries.length;\n      totalEntries += entries.length;\n    }\n\n    printSuccess('Memory Bank Statistics:');\n    console.log(`   Total Entries: ${totalEntries}`);\n    console.log(`   Namespaces: ${Object.keys(data).length}`);\n    console.log(\n      `   Size: ${(new TextEncoder().encode(JSON.stringify(data)).length / 1024).toFixed(2)} KB`,\n    );\n\n    if (Object.keys(data).length > 0) {\n      console.log('\\nüìÅ Namespace Breakdown:');\n      for (const [namespace, count] of Object.entries(namespaceStats)) {\n        console.log(`   ${namespace}: ${count} entries`);\n      }\n    }\n  } catch (err) {\n    printError(`Failed to get stats: ${err.message}`);\n  }\n}\n\nasync function exportMemory(subArgs, loadMemory, namespace) {\n  const filename = subArgs[1] || `memory-export-${Date.now()}.json`;\n\n  try {\n    const data = await loadMemory();\n\n    let exportData = data;\n    if (namespace) {\n      exportData = { [namespace]: data[namespace] || [] };\n    }\n\n    await fs.writeFile(filename, JSON.stringify(exportData, null, 2, 'utf8'));\n    printSuccess(`Memory exported to ${filename}`);\n\n    let totalEntries = 0;\n    for (const entries of Object.values(exportData)) {\n      totalEntries += entries.length;\n    }\n    console.log(\n      `üì¶ Exported ${totalEntries} entries from ${Object.keys(exportData).length} namespace(s)`,\n    );\n  } catch (err) {\n    printError(`Failed to export memory: ${err.message}`);\n  }\n}\n\nasync function importMemory(subArgs, saveMemory, loadMemory) {\n  const filename = subArgs[1];\n\n  if (!filename) {\n    printError('Usage: memory import <filename>');\n    return;\n  }\n\n  try {\n    const importContent = await fs.readFile(filename, 'utf8');\n    const importData = JSON.parse(importContent);\n\n    // Load existing memory\n    const existingData = await loadMemory();\n\n    // Merge imported data\n    let totalImported = 0;\n    for (const [namespace, entries] of Object.entries(importData)) {\n      if (!existingData[namespace]) {\n        existingData[namespace] = [];\n      }\n\n      // Add entries that don't already exist (by key)\n      const existingKeys = new Set(existingData[namespace].map((e) => e.key));\n      const newEntries = entries.filter((e) => !existingKeys.has(e.key));\n\n      existingData[namespace].push(...newEntries);\n      totalImported += newEntries.length;\n    }\n\n    await saveMemory(existingData);\n    printSuccess(`Imported ${totalImported} new entries from ${filename}`);\n  } catch (err) {\n    printError(`Failed to import memory: ${err.message}`);\n  }\n}\n\nasync function clearMemory(subArgs, saveMemory, namespace) {\n  if (!namespace || namespace === 'default') {\n    const nsFromArgs = getNamespaceFromArgs(subArgs);\n    if (!nsFromArgs) {\n      printError('Usage: memory clear --namespace <namespace>');\n      printWarning('This will clear all entries in the specified namespace');\n      return;\n    }\n    namespace = nsFromArgs;\n  }\n\n  try {\n    // Helper to load memory data\n    async function loadMemory() {\n      try {\n        const content = await fs.readFile('./memory/memory-store.json', 'utf8');\n        return JSON.parse(content);\n      } catch {\n        return {};\n      }\n    }\n    \n    const data = await loadMemory();\n\n    if (!data[namespace]) {\n      printWarning(`Namespace '${namespace}' does not exist`);\n      return;\n    }\n\n    const entryCount = data[namespace].length;\n    delete data[namespace];\n\n    await saveMemory(data);\n    printSuccess(`Cleared ${entryCount} entries from namespace '${namespace}'`);\n  } catch (err) {\n    printError(`Failed to clear memory: ${err.message}`);\n  }\n}\n\nasync function listNamespaces(loadMemory) {\n  try {\n    const data = await loadMemory();\n    const namespaces = Object.keys(data);\n\n    if (namespaces.length === 0) {\n      printWarning('No namespaces found');\n      return;\n    }\n\n    printSuccess('Available namespaces:');\n    for (const namespace of namespaces) {\n      const count = data[namespace].length;\n      console.log(`  ${namespace} (${count} entries)`);\n    }\n  } catch (err) {\n    printError(`Failed to list namespaces: ${err.message}`);\n  }\n}\n\nfunction getNamespaceFromArgs(subArgs) {\n  const namespaceIndex = subArgs.indexOf('--namespace');\n  if (namespaceIndex !== -1 && namespaceIndex + 1 < subArgs.length) {\n    return subArgs[namespaceIndex + 1];\n  }\n\n  const nsIndex = subArgs.indexOf('--ns');\n  if (nsIndex !== -1 && nsIndex + 1 < subArgs.length) {\n    return subArgs[nsIndex + 1];\n  }\n\n  return null;\n}\n\n// Helper to load memory data (needed for import function)\nasync function loadMemory() {\n  try {\n    const content = await fs.readFile('./memory/memory-store.json', 'utf8');\n    return JSON.parse(content);\n  } catch {\n    return {};\n  }\n}\n\nfunction showMemoryHelp() {\n  console.log('Memory commands:');\n  console.log('  store <key> <value>    Store a key-value pair');\n  console.log('  query <search>         Search for entries');\n  console.log('  stats                  Show memory statistics');\n  console.log('  export [filename]      Export memory to file');\n  console.log('  import <filename>      Import memory from file');\n  console.log('  clear --namespace <ns> Clear a namespace');\n  console.log('  list                   List all namespaces');\n  console.log();\n  console.log('Options:');\n  console.log('  --namespace <ns>       Specify namespace for operations');\n  console.log('  --ns <ns>              Short form of --namespace');\n  console.log('  --redact               üîí Enable API key redaction (security feature)');\n  console.log('  --secure               Alias for --redact');\n  console.log();\n  console.log('üîí Security Features (NEW in v2.6.0):');\n  console.log('  API Key Protection:    Automatically detects and redacts sensitive data');\n  console.log('  Patterns Detected:     Anthropic, OpenRouter, Gemini, Bearer tokens, etc.');\n  console.log('  Auto-Validation:       Warns when storing unredacted sensitive data');\n  console.log('  Display Redaction:     Redact sensitive data when querying with --redact');\n  console.log();\n  console.log('Examples:');\n  console.log('  memory store previous_work \"Research findings from yesterday\"');\n  console.log('  memory store api_config \"key=sk-ant-...\" --redact  # üîí Redacts API key');\n  console.log('  memory query research --namespace sparc');\n  console.log('  memory query config --redact  # üîí Shows redacted values');\n  console.log('  memory export backup.json --namespace default');\n  console.log('  memory import project-memory.json');\n  console.log('  memory stats');\n  console.log();\n  console.log('üí° Tip: Always use --redact when storing API keys or secrets!');\n}\n"],"names":["printSuccess","printError","printWarning","promises","fs","KeyRedactor","memoryCommand","subArgs","flags","memorySubcommand","memoryStore","namespace","ns","getNamespaceFromArgs","enableRedaction","redact","includes","loadMemory","content","readFile","JSON","parse","saveMemory","data","mkdir","recursive","writeFile","stringify","storeMemory","queryMemory","showMemoryStats","exportMemory","importMemory","clearMemory","listNamespaces","showMemoryHelp","key","value","slice","join","redactedValue","securityWarnings","validation","validate","safe","warnings","forEach","warning","console","log","filter","e","push","timestamp","Date","now","redacted","length","TextEncoder","encode","err","message","search","results","entries","Object","entry","sort","a","b","displayValue","substring","toLocaleString","totalEntries","namespaceStats","keys","toFixed","count","filename","exportData","values","importContent","importData","existingData","totalImported","existingKeys","Set","map","newEntries","has","nsFromArgs","entryCount","namespaces","namespaceIndex","indexOf","nsIndex"],"mappings":"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"}