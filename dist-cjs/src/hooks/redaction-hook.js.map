{"version":3,"sources":["../../../src/hooks/redaction-hook.ts"],"sourcesContent":["/**\n * Git Pre-commit Hook for API Key Redaction\n * Prevents sensitive data from being committed\n */\n\nimport { KeyRedactor } from '../utils/key-redactor.js';\nimport { readFileSync } from 'fs';\nimport { execSync } from 'child_process';\n\nexport async function validateNoSensitiveData(): Promise<{ safe: boolean; issues: string[] }> {\n  const issues: string[] = [];\n\n  try {\n    // Get staged files\n    const stagedFiles = execSync('git diff --cached --name-only', { encoding: 'utf-8' })\n      .split('\\n')\n      .filter(f => f.trim() && !f.includes('.env') && !f.includes('node_modules'));\n\n    // Check each staged file\n    for (const file of stagedFiles) {\n      try {\n        const content = readFileSync(file, 'utf-8');\n        const validation = KeyRedactor.validate(content);\n\n        if (!validation.safe) {\n          issues.push(`‚ö†Ô∏è  ${file}: ${validation.warnings.join(', ')}`);\n        }\n      } catch (error) {\n        // File might be deleted or binary\n        continue;\n      }\n    }\n\n    return {\n      safe: issues.length === 0,\n      issues,\n    };\n  } catch (error) {\n    console.error('Error validating sensitive data:', error);\n    return {\n      safe: false,\n      issues: ['Failed to validate files'],\n    };\n  }\n}\n\nexport async function runRedactionCheck(): Promise<number> {\n  console.log('üîí Running API key redaction check...\\n');\n\n  const result = await validateNoSensitiveData();\n\n  if (!result.safe) {\n    console.error('‚ùå COMMIT BLOCKED - Sensitive data detected:\\n');\n    result.issues.forEach(issue => console.error(issue));\n    console.error('\\n‚ö†Ô∏è  Please remove sensitive data before committing.');\n    console.error('üí° Tip: Use environment variables instead of hardcoding keys.\\n');\n    return 1;\n  }\n\n  console.log('‚úÖ No sensitive data detected - safe to commit\\n');\n  return 0;\n}\n\n// CLI execution (ES module compatible)\nconst isMainModule = import.meta.url === `file://${process.argv[1]}`;\nif (isMainModule) {\n  runRedactionCheck()\n    .then(code => process.exit(code))\n    .catch(error => {\n      console.error('Error:', error);\n      process.exit(1);\n    });\n}\n"],"names":["KeyRedactor","readFileSync","execSync","validateNoSensitiveData","issues","stagedFiles","encoding","split","filter","f","trim","includes","file","content","validation","validate","safe","push","warnings","join","error","length","console","runRedactionCheck","log","result","forEach","issue","isMainModule","url","process","argv","then","code","exit","catch"],"mappings":"AAKA,SAASA,WAAW,QAAQ,2BAA2B;AACvD,SAASC,YAAY,QAAQ,KAAK;AAClC,SAASC,QAAQ,QAAQ,gBAAgB;AAEzC,OAAO,eAAeC;IACpB,MAAMC,SAAmB,EAAE;IAE3B,IAAI;QAEF,MAAMC,cAAcH,SAAS,iCAAiC;YAAEI,UAAU;QAAQ,GAC/EC,KAAK,CAAC,MACNC,MAAM,CAACC,CAAAA,IAAKA,EAAEC,IAAI,MAAM,CAACD,EAAEE,QAAQ,CAAC,WAAW,CAACF,EAAEE,QAAQ,CAAC;QAG9D,KAAK,MAAMC,QAAQP,YAAa;YAC9B,IAAI;gBACF,MAAMQ,UAAUZ,aAAaW,MAAM;gBACnC,MAAME,aAAad,YAAYe,QAAQ,CAACF;gBAExC,IAAI,CAACC,WAAWE,IAAI,EAAE;oBACpBZ,OAAOa,IAAI,CAAC,CAAC,IAAI,EAAEL,KAAK,EAAE,EAAEE,WAAWI,QAAQ,CAACC,IAAI,CAAC,OAAO;gBAC9D;YACF,EAAE,OAAOC,OAAO;gBAEd;YACF;QACF;QAEA,OAAO;YACLJ,MAAMZ,OAAOiB,MAAM,KAAK;YACxBjB;QACF;IACF,EAAE,OAAOgB,OAAO;QACdE,QAAQF,KAAK,CAAC,oCAAoCA;QAClD,OAAO;YACLJ,MAAM;YACNZ,QAAQ;gBAAC;aAA2B;QACtC;IACF;AACF;AAEA,OAAO,eAAemB;IACpBD,QAAQE,GAAG,CAAC;IAEZ,MAAMC,SAAS,MAAMtB;IAErB,IAAI,CAACsB,OAAOT,IAAI,EAAE;QAChBM,QAAQF,KAAK,CAAC;QACdK,OAAOrB,MAAM,CAACsB,OAAO,CAACC,CAAAA,QAASL,QAAQF,KAAK,CAACO;QAC7CL,QAAQF,KAAK,CAAC;QACdE,QAAQF,KAAK,CAAC;QACd,OAAO;IACT;IAEAE,QAAQE,GAAG,CAAC;IACZ,OAAO;AACT;AAGA,MAAMI,eAAe,YAAYC,GAAG,KAAK,CAAC,OAAO,EAAEC,QAAQC,IAAI,CAAC,EAAE,EAAE;AACpE,IAAIH,cAAc;IAChBL,oBACGS,IAAI,CAACC,CAAAA,OAAQH,QAAQI,IAAI,CAACD,OAC1BE,KAAK,CAACf,CAAAA;QACLE,QAAQF,KAAK,CAAC,UAAUA;QACxBU,QAAQI,IAAI,CAAC;IACf;AACJ"}