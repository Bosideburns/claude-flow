{"version":3,"sources":["../../../src/reasoningbank/reasoningbank-adapter.js"],"sourcesContent":["/**\n * ReasoningBank Adapter for Claude-Flow (WASM-Powered)\n *\n * Wraps agentic-flow's ReasoningBank WASM for ultra-fast performance\n * Performance: 0.04ms/op storage, 10,000-25,000 ops/sec (250x+ faster than SDK)\n */\n\nimport { createReasoningBank } from 'agentic-flow/dist/reasoningbank/wasm-adapter.js';\nimport { v4 as uuidv4 } from 'uuid';\n\n// WASM instance (singleton)\nlet wasmInstance = null;\nlet initPromise = null;\n\n// Query result cache (LRU)\nconst queryCache = new Map();\nconst CACHE_SIZE = 100;\nconst CACHE_TTL = 60000; // 60 seconds\n\n/**\n * Initialize ReasoningBank WASM instance\n * @returns {Promise<ReasoningBankAdapter>}\n */\nasync function getWasmInstance() {\n  if (wasmInstance) {\n    return wasmInstance;\n  }\n\n  if (initPromise) {\n    return initPromise;\n  }\n\n  initPromise = (async () => {\n    try {\n      // Create WASM instance with database name from environment or default\n      const dbName = process.env.CLAUDE_FLOW_DB_NAME || 'claude-flow-memory';\n      wasmInstance = await createReasoningBank(dbName);\n      console.log('[ReasoningBank] WASM initialized successfully');\n      return wasmInstance;\n    } catch (error) {\n      console.error('[ReasoningBank] WASM initialization failed:', error);\n      throw new Error(`Failed to initialize ReasoningBank WASM: ${error.message}`);\n    }\n  })();\n\n  return initPromise;\n}\n\n/**\n * Initialize ReasoningBank database (WASM version)\n */\nexport async function initializeReasoningBank() {\n  // Just initialize the WASM instance\n  await getWasmInstance();\n  return true;\n}\n\n/**\n * Store a memory in ReasoningBank (WASM-powered for 0.04ms performance)\n *\n * Maps claude-flow memory model to ReasoningBank pattern model:\n * - key -> strategy\n * - value -> task_description\n * - namespace -> task_category\n * - confidence -> success_score\n */\nexport async function storeMemory(key, value, options = {}) {\n  const wasm = await getWasmInstance();\n\n  try {\n    // Map our memory model to ReasoningBank pattern model\n    const pattern = {\n      task_description: value,\n      task_category: options.namespace || 'default',\n      strategy: key,\n      success_score: options.confidence || 0.8,\n      // Include metadata for compatibility\n      metadata: {\n        agent: options.agent || 'memory-agent',\n        domain: options.domain || 'general',\n        type: options.type || 'fact',\n        original_key: key,\n        original_value: value,\n        namespace: options.namespace || 'default',\n        created_at: new Date().toISOString()\n      }\n    };\n\n    // Store using WASM (ultra-fast: 0.04ms/op)\n    const patternId = await wasm.storePattern(pattern);\n\n    // Invalidate query cache when new memory is added\n    queryCache.clear();\n\n    return patternId;\n  } catch (error) {\n    console.error('[ReasoningBank] WASM storeMemory failed:', error);\n    throw new Error(`Failed to store memory: ${error.message}`);\n  }\n}\n\n/**\n * Query memories from ReasoningBank (WASM-powered semantic search)\n *\n * Uses WASM findSimilar for ultra-fast semantic search\n * Fallback to searchByCategory if semantic search fails\n */\nexport async function queryMemories(searchQuery, options = {}) {\n  // Check cache first\n  const cached = getCachedQuery(searchQuery, options);\n  if (cached) {\n    return cached;\n  }\n\n  const wasm = await getWasmInstance();\n  const limit = options.limit || 10;\n  const namespace = options.namespace || 'default';\n\n  try {\n    // Try semantic search first (WASM-powered, ultra-fast)\n    const results = await wasm.findSimilar(\n      searchQuery,\n      namespace,\n      limit\n    );\n\n    // Map WASM pattern results to our memory format\n    const memories = results.map(pattern => ({\n      id: pattern.id || `mem_${uuidv4()}`,\n      key: pattern.strategy || pattern.metadata?.original_key || 'unknown',\n      value: pattern.task_description || pattern.metadata?.original_value || '',\n      namespace: pattern.task_category || pattern.metadata?.namespace || 'default',\n      confidence: pattern.success_score || 0.8,\n      usage_count: pattern.usage_count || 0,\n      created_at: pattern.metadata?.created_at || new Date().toISOString(),\n      score: pattern.similarity_score || 0,\n      // Include original pattern for debugging\n      _pattern: pattern\n    }));\n\n    // If no results, try category search as fallback\n    if (memories.length === 0) {\n      console.warn('[ReasoningBank] Semantic search returned 0 results, trying category fallback');\n      const categoryResults = await wasm.searchByCategory(namespace, limit);\n\n      const fallbackMemories = categoryResults.map(pattern => ({\n        id: pattern.id || `mem_${uuidv4()}`,\n        key: pattern.strategy || pattern.metadata?.original_key || 'unknown',\n        value: pattern.task_description || pattern.metadata?.original_value || '',\n        namespace: pattern.task_category || pattern.metadata?.namespace || 'default',\n        confidence: pattern.success_score || 0.8,\n        usage_count: pattern.usage_count || 0,\n        created_at: pattern.metadata?.created_at || new Date().toISOString(),\n        _pattern: pattern\n      }));\n\n      // Cache and return fallback results\n      setCachedQuery(searchQuery, options, fallbackMemories);\n      return fallbackMemories;\n    }\n\n    // Cache successful results\n    setCachedQuery(searchQuery, options, memories);\n    return memories;\n  } catch (error) {\n    console.warn('[ReasoningBank] WASM query failed, trying category fallback:', error.message);\n\n    try {\n      // Final fallback: search by category\n      const categoryResults = await wasm.searchByCategory(namespace, limit);\n\n      const fallbackMemories = categoryResults.map(pattern => ({\n        id: pattern.id || `mem_${uuidv4()}`,\n        key: pattern.strategy || pattern.metadata?.original_key || 'unknown',\n        value: pattern.task_description || pattern.metadata?.original_value || '',\n        namespace: pattern.task_category || pattern.metadata?.namespace || 'default',\n        confidence: pattern.success_score || 0.8,\n        usage_count: pattern.usage_count || 0,\n        created_at: pattern.metadata?.created_at || new Date().toISOString()\n      }));\n\n      setCachedQuery(searchQuery, options, fallbackMemories);\n      return fallbackMemories;\n    } catch (fallbackError) {\n      console.error('[ReasoningBank] All query methods failed:', fallbackError);\n      return [];\n    }\n  }\n}\n\n/**\n * List all memories (using WASM searchByCategory with no filter)\n */\nexport async function listMemories(options = {}) {\n  const wasm = await getWasmInstance();\n  const limit = options.limit || 10;\n  const namespace = options.namespace || 'default';\n\n  try {\n    // Use category search to list all memories in namespace\n    const patterns = await wasm.searchByCategory(namespace, limit);\n\n    return patterns.map(pattern => ({\n      id: pattern.id || `mem_${uuidv4()}`,\n      key: pattern.strategy || pattern.metadata?.original_key || 'unknown',\n      value: pattern.task_description || pattern.metadata?.original_value || '',\n      namespace: pattern.task_category || pattern.metadata?.namespace || 'default',\n      confidence: pattern.success_score || 0.8,\n      usage_count: pattern.usage_count || 0,\n      created_at: pattern.metadata?.created_at || new Date().toISOString()\n    }));\n  } catch (error) {\n    console.error('[ReasoningBank] listMemories failed:', error);\n    return [];\n  }\n}\n\n/**\n * Get ReasoningBank statistics (WASM-powered)\n */\nexport async function getStatus() {\n  const wasm = await getWasmInstance();\n\n  try {\n    const stats = await wasm.getStats();\n\n    return {\n      total_memories: stats.total_patterns || 0,\n      total_categories: stats.total_categories || 0,\n      storage_backend: stats.storage_backend || 'unknown',\n      wasm_version: stats.wasm_version || '1.5.11',\n      performance: 'WASM-powered (0.04ms/op)',\n      avg_confidence: 0.8, // WASM doesn't track this, use default\n      total_usage: 0, // WASM doesn't track this\n      total_embeddings: stats.total_patterns || 0,\n      total_trajectories: 0 // Not applicable in WASM\n    };\n  } catch (error) {\n    console.error('[ReasoningBank] getStatus failed:', error);\n    return {\n      total_memories: 0,\n      error: error.message\n    };\n  }\n}\n\n/**\n * Check which ReasoningBank tables are present (WASM version always has required data)\n */\nexport async function checkReasoningBankTables() {\n  const wasm = await getWasmInstance();\n\n  try {\n    await wasm.getStats();\n\n    return {\n      exists: true,\n      existingTables: ['WASM patterns storage'],\n      missingTables: [],\n      requiredTables: ['WASM patterns storage'],\n      backend: 'WASM',\n      note: 'WASM backend does not use traditional SQL tables'\n    };\n  } catch (error) {\n    return {\n      exists: false,\n      existingTables: [],\n      missingTables: [],\n      requiredTables: [],\n      error: error.message\n    };\n  }\n}\n\n/**\n * Migrate existing database (not needed for WASM, always initialized)\n */\nexport async function migrateReasoningBank() {\n  try {\n    await getWasmInstance();\n\n    return {\n      success: true,\n      message: 'WASM backend initialized successfully',\n      migrated: false,\n      note: 'WASM backend does not require traditional migration'\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: `WASM initialization failed: ${error.message}`,\n      error: error.message\n    };\n  }\n}\n\n/**\n * Get cached query results\n */\nfunction getCachedQuery(searchQuery, options) {\n  const cacheKey = JSON.stringify({ searchQuery, options });\n  const cached = queryCache.get(cacheKey);\n\n  if (cached && Date.now() - cached.timestamp < CACHE_TTL) {\n    return cached.results;\n  }\n\n  return null;\n}\n\n/**\n * Set cached query results (LRU eviction)\n */\nfunction setCachedQuery(searchQuery, options, results) {\n  const cacheKey = JSON.stringify({ searchQuery, options });\n\n  // LRU eviction\n  if (queryCache.size >= CACHE_SIZE) {\n    const firstKey = queryCache.keys().next().value;\n    queryCache.delete(firstKey);\n  }\n\n  queryCache.set(cacheKey, {\n    results,\n    timestamp: Date.now()\n  });\n}\n"],"names":["createReasoningBank","v4","uuidv4","wasmInstance","initPromise","queryCache","Map","CACHE_SIZE","CACHE_TTL","getWasmInstance","dbName","process","env","CLAUDE_FLOW_DB_NAME","console","log","error","Error","message","initializeReasoningBank","storeMemory","key","value","options","wasm","pattern","task_description","task_category","namespace","strategy","success_score","confidence","metadata","agent","domain","type","original_key","original_value","created_at","Date","toISOString","patternId","storePattern","clear","queryMemories","searchQuery","cached","getCachedQuery","limit","results","findSimilar","memories","map","id","usage_count","score","similarity_score","_pattern","length","warn","categoryResults","searchByCategory","fallbackMemories","setCachedQuery","fallbackError","listMemories","patterns","getStatus","stats","getStats","total_memories","total_patterns","total_categories","storage_backend","wasm_version","performance","avg_confidence","total_usage","total_embeddings","total_trajectories","checkReasoningBankTables","exists","existingTables","missingTables","requiredTables","backend","note","migrateReasoningBank","success","migrated","cacheKey","JSON","stringify","get","now","timestamp","size","firstKey","keys","next","delete","set"],"mappings":"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"}